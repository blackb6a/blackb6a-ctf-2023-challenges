from pwn import *
from tqdm import trange

# context.log_level = 'debug'
# r = process(['python3', 'chall.py'])
r = remote('localhost', 28101)

for i in trange(256):
    log.info(f'=== Round {i+1}/256 ===')

    p = -97523^31
    assert p % 4 == 1
    q = (p - 1) // 4
    r.sendlineafter(b'[<] q = ', str(q).encode())

    r.recvuntil(b'[>] g = ')
    g = int(r.recvline().decode())

    r.recvuntil(b'[>] h = ')
    h = int(r.recvline().decode())

    # Note: p is not a prime!
    Zp = Zmod(p)
    g, h = Zp(g), Zp(h)

    log.info(f'order(g) = {g.multiplicative_order()}')
    log.info(f'2**512   = {2**512}')
    log.info(f'{g = }')
    log.info(f'{h = }')

    x = h.log(g)
    log.info(f'{x = }')
    r.sendlineafter(b'[<] x = ', str(x).encode())

r.interactive()

# The below method is used to generate q (using Sagemath)
'''
r = 10000
while r < 100000:
    r = next_prime(r)
    # Make it a safe prime
    if not is_prime((r-1)//2): continue
    p, k = r, 1
    while p < 2**514:
        p, k = p*r, k+1
        if p < 2**513:  continue
        if p >= 2**514: continue
        if p % 4 != 3:  continue
        q = (p + 1) // 4
        print(f'{r}^{k}; q={q}')
'''
# 15083^37; q=10045835386473581465781600275106683646072571617900530917135350642765942960582504014916497491638018470164702221163311889910335914229245356756068161022056831
# 25847^35; q=6796651587487038886866830933123596530411117326386999338463657702440808040135303678153328559103258683856165947338323503244086977380574702165206117570941386
# 25919^35; q=7491667046708922278694072902850109703378369072483719709430448966566166608130956805693739049968949995140158584983903374871394094380042286728091457500514800
# 26003^35; q=8389980820539727524059167071628847689669245574918711987664372198032307209936536303440507874053518737686720776236755149752351960213857844559137105684197427
# 26099^35; q=9544987568906066287081792438807531291252518297037882951645092283245666538644025580431010436208647565845424208039896733597394383622596085874578249081490875
# 47963^33; q=7376480796848936466176524883399427412626542299906461325241355978145510038342386225682692876288609180413680533080662467942949559223504730218758615211909751
# 48407^33; q=9997917809043055208891095870019187740300569487340073111070297062884502194418681427989771696684233082300953143720483986976926179426506521448637197503792902
# 48479^33; q=10500513862238882194065183093726224741607632406179277300417128702330937393686643579798281434614164277724696506988973285281359051064199591787218566699715160
# 48563^33; q=11117874317063711447819246413398379195443279779123242398245343683644898463566539677187099728255522452697797154121665257224017506199970333014621959456650701
# 96059^31; q=7188195926011353618451719393944123188604347980882138550457309989497170289420752602994033374002541813631769317209199881134888589854454329359112800775655965
# 96263^31; q=7676816612858710854552858977470606500092754934947004615216126635158092102209274456001935540743721669988268030381133032199940542439415563446316266236930222
# 96443^31; q=8134522379075158053221458467639807502036569172543150262255665766082167315743483886979460286377423015986861475108150154549987193848334257790250610500198077
# 96479^31; q=8229180786348862019055749249721840625741766370901709103290183671305119950203169242211623477394048914648412991120366610451537188245728927406333564955723720
# 96827^31; q=9200909800669030193015586011428895955082283734244896213251349756667350045805100743743659201948813748778734564025259490489018375683826932171915112985119581
# 96959^31; q=9597805994052507172558760163576901449866340004436068879963861226473925793006187973204658047189500045463826439557184361844604613892921372231085407069295440
# 97127^31; q=10126963039305763845676539707650978852807219786868059421242840963964233967691990802541790480516266296303468060690153710761490725350616677022031068615826006
# 97187^31; q=10322704058214829929470252367110175126855738846253038868594591141560565519336518736415806306268593731949503873134080846202177772348923912383514905106904291
# 97463^31; q=11271274867010878838058607875698465417456322380556980981243910027819855443711895927337072765418283962424926738656556467324573654299407106798053168191985922
# 97523^31; q=11488375929812687378291445718066526581063640829952886420351209221757564791803836690733943962302955410382752440678071608610637558643635772091207009676804207

# Why safe prime??? Example: ϕ(827^53) = 2 * 7 * 59 * 827^52 (not good because 7 is a small factor... we want ϕ(p^k) = 2 * q * p^(k-1))
