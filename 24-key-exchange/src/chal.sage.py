

# This file was *autogenerated* from the file chal.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_512 = Integer(512); _sage_const_15 = Integer(15); _sage_const_64 = Integer(64)
import hashlib
from functools import cache
from secrets import randbelow

def _random_matrix(K, n):
    return Matrix(K, n, [K.from_integer(randbelow(K.order())) for _ in range(n**_sage_const_2 )])

def hash_matrix(M):
    s = [ZZ(list(c), _sage_const_2 ) for row in M for c in row]
    return hashlib.sha512(str(s).encode()).digest()

def dump_matrix(M):
    return [f.to_integer() for f in M.list()]

n = _sage_const_512 
q = _sage_const_2 **_sage_const_15 
K = GF(q, names=('x',)); (x,) = K._first_ngens(1)
A, B = [_random_matrix(K, n) for _ in range(_sage_const_2 )]
assert A * B != B * A

class Player:
    @cache
    def fa(self): return A**self.k1
    @cache
    def fb(self): return B**self.k2
    def __init__(self): self.k1, self.k2 = [ZZ(randbelow(_sage_const_2 **_sage_const_64 )) for _ in range(_sage_const_2 )]
    def pub(self): return self.fa() * self.fb()
    def secret(self): return (self.k1, self.k2)
    def exchange(self, recv): self.recv = recv
    def shared(self): return self.fa() * self.recv * self.fb()

print("computing omg")
Alice, Bob = [Player() for _ in range(_sage_const_2 )]
Alice.exchange(Bob.pub())
Bob.exchange(Alice.pub())
assert Alice.shared() == Bob.shared()

with open("flag.txt", "r") as fin, open("output.txt", "w") as fout:
    FLAG = fin.read().strip().encode("utf-16")
    assert len(FLAG) <= _sage_const_64 
    enc_FLAG = bytes([x.__xor__(y) for x, y in zip(FLAG, hash_matrix(Alice.shared()))])

    print(K.modulus(), file=fout)
    print(dump_matrix(A), file=fout)
    print(dump_matrix(B), file=fout)
    print(dump_matrix(Alice.pub()), file=fout)
    print(dump_matrix(Bob.pub()), file=fout)
    print(enc_FLAG.hex(), file=fout)

